name: CI Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install ruff mypy black isort
          pip install -r requirements.txt

      - name: Run ruff
        run: ruff check src/ tests/

      - name: Run black
        run: black --check src/ tests/

      - name: Run isort
        run: isort --check-only src/ tests/

      - name: Run mypy
        run: mypy src/

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run unit tests with coverage
        env:
          SECRET_KEY: test_secret_key_minimum_32_characters_long_for_ci_only_testing
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/unit/ -v --cov=src/aetherlens --cov-report=xml --cov-report=html --cov-report=term

      - name: Check coverage threshold
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          COVERAGE_PCT=$(echo "$COVERAGE * 100" | bc)
          echo "Coverage: ${COVERAGE_PCT}%"
          if (( $(echo "$COVERAGE < 0.70" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE_PCT}% is below 70% threshold"
            exit 1
          fi
          echo "✓ Coverage ${COVERAGE_PCT}% meets 70% threshold"

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            .coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit
          name: codecov-unit-${{ matrix.python-version }}

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: aetherlens_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run integration tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/aetherlens_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_minimum_32_characters_long_for_ci_only_testing
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/integration/ tests/api/ -v -m "integration or not performance" --cov=src/aetherlens --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            .coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration
          name: codecov-integration-${{ matrix.python-version }}

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: aetherlens_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run performance tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/aetherlens_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_minimum_32_characters_long_for_ci_only_testing
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/performance/ -v -m performance --tb=short

      - name: Upload performance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            .pytest_cache/
            test-results/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install safety bandit

      - name: Run safety check
        run: safety check --json
        continue-on-error: true

      - name: Run bandit
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json

  test-security:
    name: Security Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run security tests
        env:
          SECRET_KEY: test_secret_key_minimum_32_characters_long_for_ci_only_testing
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/security/ -v -m security

      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results-${{ matrix.python-version }}
          path: |
            .pytest_cache/

  test-quality:
    name: Code Quality Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run quality tests
        env:
          SECRET_KEY: test_secret_key_minimum_32_characters_long_for_ci_only_testing
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/quality/ -v -m quality

      - name: Upload quality test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-test-results-${{ matrix.python-version }}
          path: |
            .pytest_cache/

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, test-security, test-quality]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: aetherlens/home:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm aetherlens/home:test python --version

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, test-unit, test-integration, test-security, test-quality]
    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test-unit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.test-integration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.test-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Tests | ${{ needs.test-quality.result }} |" >> $GITHUB_STEP_SUMMARY

          # Fail if any required job failed
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test-unit.result }}" != "success" ]] || \
             [[ "${{ needs.test-integration.result }}" != "success" ]] || \
             [[ "${{ needs.test-security.result }}" != "success" ]] || \
             [[ "${{ needs.test-quality.result }}" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some tests failed. Please review the results above.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
          fi
